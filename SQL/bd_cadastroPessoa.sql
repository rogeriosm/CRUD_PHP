-- MySQL Script generated by MySQL Workbench
-- Tue Dec 31 11:19:33 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bd_cadastroPessoa
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bd_cadastroPessoa
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bd_cadastroPessoa` DEFAULT CHARACTER SET utf8 ;
USE `bd_cadastroPessoa` ;

-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`tipo_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`tipo_usuario` (
  `id_tipo_usuario` INT NOT NULL AUTO_INCREMENT,
  `descricao` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_tipo_usuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`pessoa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`pessoa` (
  `id_pessoa` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(255) NOT NULL,
  `login` VARCHAR(255) NOT NULL,
  `senha` VARCHAR(255) NOT NULL,
  `apelido` VARCHAR(255) NULL DEFAULT 'Não Informado',
  `tipo_usuario_id_tipo_usuario` INT NOT NULL,
  PRIMARY KEY (`id_pessoa`),
  INDEX `fk_pessoa_tipo_usuario1_idx` (`tipo_usuario_id_tipo_usuario` ASC) VISIBLE,
  CONSTRAINT `fk_pessoa_tipo_usuario1`
    FOREIGN KEY (`tipo_usuario_id_tipo_usuario`)
    REFERENCES `bd_cadastroPessoa`.`tipo_usuario` (`id_tipo_usuario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = '					';


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`endereco` (
  `id_endereco` INT NOT NULL AUTO_INCREMENT,
  `residencial` VARCHAR(45) NULL DEFAULT 'Não Informado',
  `trabalho` VARCHAR(45) NULL DEFAULT 'Não Informado',
  `pessoa_id_pessoa` INT NOT NULL,
  PRIMARY KEY (`id_endereco`),
  INDEX `fk_endereco_pessoa_idx` (`pessoa_id_pessoa` ASC) VISIBLE,
  CONSTRAINT `fk_endereco_pessoa`
    FOREIGN KEY (`pessoa_id_pessoa`)
    REFERENCES `bd_cadastroPessoa`.`pessoa` (`id_pessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`email`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`email` (
  `id_email` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `senha` VARCHAR(45) NULL DEFAULT 'Não Informado',
  `endereco_id_endereco` INT NOT NULL,
  PRIMARY KEY (`id_email`),
  INDEX `fk_email_endereco1_idx` (`endereco_id_endereco` ASC) VISIBLE,
  CONSTRAINT `fk_email_endereco1`
    FOREIGN KEY (`endereco_id_endereco`)
    REFERENCES `bd_cadastroPessoa`.`endereco` (`id_endereco`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`telefone`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`telefone` (
  `id_telefone` INT NOT NULL AUTO_INCREMENT,
  `numero` VARCHAR(45) NULL DEFAULT 'Não Informado',
  `pessoa_id_pessoa` INT NOT NULL,
  PRIMARY KEY (`id_telefone`),
  INDEX `fk_telefone_pessoa1_idx` (`pessoa_id_pessoa` ASC) VISIBLE,
  CONSTRAINT `fk_telefone_pessoa1`
    FOREIGN KEY (`pessoa_id_pessoa`)
    REFERENCES `bd_cadastroPessoa`.`pessoa` (`id_pessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`documento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`documento` (
  `id_documento` INT NOT NULL AUTO_INCREMENT,
  `rg` VARCHAR(45) NULL DEFAULT 'Não Informado',
  `cpf` VARCHAR(45) NULL DEFAULT 'Não Informado',
  `pessoa_id_pessoa` INT NOT NULL,
  PRIMARY KEY (`id_documento`),
  INDEX `fk_documento_pessoa1_idx` (`pessoa_id_pessoa` ASC) VISIBLE,
  CONSTRAINT `fk_documento_pessoa1`
    FOREIGN KEY (`pessoa_id_pessoa`)
    REFERENCES `bd_cadastroPessoa`.`pessoa` (`id_pessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`curso` (
  `id_curso` INT NOT NULL AUTO_INCREMENT,
  `disciplina` VARCHAR(45) NULL DEFAULT 'Não Informado',
  PRIMARY KEY (`id_curso`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`curso_pessoa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`curso_pessoa` (
  `curso_id_curso` INT NOT NULL,
  `pessoa_id_pessoa` INT NOT NULL,
  PRIMARY KEY (`curso_id_curso`, `pessoa_id_pessoa`),
  INDEX `fk_curso_has_pessoa_pessoa1_idx` (`pessoa_id_pessoa` ASC) VISIBLE,
  INDEX `fk_curso_has_pessoa_curso1_idx` (`curso_id_curso` ASC) VISIBLE,
  CONSTRAINT `fk_curso_has_pessoa_curso1`
    FOREIGN KEY (`curso_id_curso`)
    REFERENCES `bd_cadastroPessoa`.`curso` (`id_curso`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_curso_has_pessoa_pessoa1`
    FOREIGN KEY (`pessoa_id_pessoa`)
    REFERENCES `bd_cadastroPessoa`.`pessoa` (`id_pessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bd_cadastroPessoa`.`arquivo_multimidia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bd_cadastroPessoa`.`arquivo_multimidia` (
  `id_arquivos_multimedia` INT NOT NULL AUTO_INCREMENT,
  `nome_arquivo` VARCHAR(45) NULL DEFAULT 'Não informado',
  `descricao` VARCHAR(255) NULL DEFAULT 'Não informado',
  `legenda` VARCHAR(45) NOT NULL,
  `path_image` VARCHAR(45) NOT NULL,
  `pessoa_id_pessoa` INT NOT NULL,
  PRIMARY KEY (`id_arquivos_multimedia`),
  INDEX `fk_arquivos_multimidia_pessoa1_idx` (`pessoa_id_pessoa` ASC) VISIBLE,
  CONSTRAINT `fk_arquivos_multimidia_pessoa1`
    FOREIGN KEY (`pessoa_id_pessoa`)
    REFERENCES `bd_cadastroPessoa`.`pessoa` (`id_pessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `bd_cadastroPessoa` ;

-- -----------------------------------------------------
-- procedure cadastra_pessoa
-- -----------------------------------------------------

DELIMITER $$
USE `bd_cadastroPessoa`$$
CREATE PROCEDURE `cadastra_pessoa`
(
	-- tabela pessoa --
	in p_nome varchar(255), in p_apelido varchar(255), in p_login varchar(255), in p_senha varchar(255),
    -- tabela documento --
    in p_cpf varchar(45), in p_rg varchar(45),
    -- tabela telefone --
    in p_telefoneNumero varchar(45),
    -- tabela tipoUsuario --
    in p_tipoUsuario int,
    -- tabela endereço --
    in p_residencial varchar(45), in p_trabalho varchar(45),
    -- tabela email -- 
    in p_email varchar(45), in p_senha_email varchar(45),
    -- tabela curso -- 
    in p_curso varchar(45),
    -- retorna se a inserção foi bem sucedida --
    out `_rollback` bool
)
BEGIN
    DECLARE `_rollback` BOOL DEFAULT 0;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET `_rollback` = 1;
    
START TRANSACTION;
-- verifica se os campos estao vazios e seta null para forçar um rollback
-- foi passado essa obrigação para o bando de dados para garantir a segurança
-- caso o programador esqueça de fazer a verificação de entrada de dados no formulario

	if p_nome = '' then
		set p_nome = null;
	end if;
	if p_login = '' then
		set p_login = null;
	end if;
	if p_senha = '' then
		set p_senha = null;
	end if;
	if p_tipoUsuario = '' then
		set p_tipoUsuario = null;
	end if;
	if p_email then            
		set p_email = null;
	end if;

-- se os campos nao obrigatorios nao forem preenchidos, sera inserido o valor default

	if p_apelido = '' or p_apelido is null then
		set p_apelido = 'Não Informado';
	end if;
	if p_rg = '' or p_rg is null then
		set p_rg = 'Não Informado';
	end if;
	if p_cpf = '' or p_cpf is null then
		set p_cpf = 'Não Informado';
	end if;
	if p_telefoneNumero = '' or p_telefoneNumero is null then
		set p_telefoneNumero = 'Não Informado';
	end if;
	if p_residencial = '' or p_residencial is null then
		set p_residencial = 'Não Informado';
	end if;
	if p_trabalho = '' or p_trabalho is null then
		set p_trabalho = 'Não Informado';
	end if;
	if p_senha_email = '' or p_senha_email is null then
		set p_senha_email = 'Não Informado';
	end if;
	if p_curso = '' or p_curso is null then
		set p_curso = 'Não Informado';
	end if;
	

-- cadastrando uma pesseoa so com os dados principais 
-- ter certeza que tem tipos de usuarios cadastrados na tabela tipos de usuario
	INSERT INTO `bd_cadastropessoa`.`pessoa` 
	(`id_pessoa`, `nome`, `login`, `senha`, `apelido`,`tipo_usuario_id_tipo_usuario`) 
	VALUES 
	(default, p_nome, p_login, p_senha, p_apelido, p_tipoUsuario);
-- busaca o ID do ultimo item inserido e coloca dentro da variavel @id_documento;
	select last_insert_id() into @id_pessoa;
            
-- cadastra um documento e liga a uma pessoa
	insert into `bd_cadastropessoa`.`documento`
	(id_documento, rg, cpf, pessoa_id_pessoa)
	values
	(default, p_rg, p_cpf, @id_pessoa);	
        
-- cadastra um telefone e liga a uma pessoa
	insert into `bd_cadastropessoa`.`telefone`
	(id_telefone, numero, pessoa_id_pessoa)
	values
	(default, p_telefoneNumero, @id_pessoa);
         
-- insere no banco de dados o endereço tabalho e residencial
	insert into `bd_cadastropessoa`.`endereco`
	(id_endereco, residencial, trabalho, pessoa_id_pessoa)
	values
	(default, p_residencial, p_trabalho, @id_pessoa);
    -- busaca o ultimo id inserido e coloca dentro da variavel @id_endereco;
	select last_insert_id() into @id_endereco;
   
-- cadastra um email e senha e liga a um endereço
	insert into `bd_cadastropessoa`.`email`
	(id_email, email, senha, endereco_id_endereco)
	values
	(default, p_email, p_senha_email, @id_endereco);
    
-- cadastra um curso
	insert into `bd_cadastropessoa`.`curso`
	(id_curso, disciplina)
	values
	(default, p_curso);
    -- busaca o ultimo id inserido e coloca dentro da variavel @id_curso;
	select last_insert_id() into @id_curso;
    
-- liga o curso a pessoa cadastrado
	insert into `bd_cadastropessoa`.`curso_pessoa`
	(`curso_id_curso`, `pessoa_id_pessoa`) 
    VALUES 
    (@id_curso, @id_pessoa);
        
-- se nao hover erro finaliza a procedure com o commit e retorna sucesso
	IF `_rollback` THEN
		ROLLBACK;
	ELSE
		COMMIT;
	END IF;
	-- retorna se foi cadastrado com sucesso ou nao
	select `_rollback`;

END$$

DELIMITER ;
-- inserindo os tipos de usuario para evitar conflito

INSERT INTO `bd_cadastropessoa`.`tipo_usuario` (`id_tipo_usuario`, `descricao`) VALUES ('1', 'usuario');
INSERT INTO `bd_cadastropessoa`.`tipo_usuario` (`id_tipo_usuario`, `descricao`) VALUES ('2', 'administrador');

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
